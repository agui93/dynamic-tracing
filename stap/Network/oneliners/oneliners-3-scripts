# Trace net/socket.c call graph
stap -v -T 10 -e '
    probe kernel.function("*@net/socket.c").call{
        printf ("%s -> %s\n", thread_indent(1), probefunc())
    }
    probe kernel.function("*@net/socket.c").return{
        printf ("%s <- %s\n", thread_indent(-1), probefunc())
    }
'


# Socket listens
stap -v -T 10 -e '
    probe kernel.function("inet_listen") {
        time = gettimeofday_ns()
        family = __ip_sock_family($sock->sk)
        laddr   = format_ipaddr(__ip_sock_saddr($sock->sk), family)
        lport   = __tcp_sock_sport($sock->sk)

        printf("%18d %16s:%-5d %4d %4d %s[%d,%d]\n", time/1000, laddr, lport, family, $backlog, execname(), pid(), tid());
    }
'


# Socket accepts by process name:
stap -v -T 10 -e 'global counts; probe syscall.accept { counts[execname()] <<< 1 }'


# Socket connections by process and user stack trace:
stap -v -T 10 -e 'global counts; probe syscall.connect { counts[execname()] <<< 1; print_ubacktrace(); printf("\n"); }'





# Socket close:
stap -v -T 10 -e '
    probe socket.close {
        pro_str = sock_prot_num2str(protocol)
        if(pro_str == "TCP" || pro_str == "UDP"){
            fam_str = sock_fam_num2str(family)

            saddr   = format_ipaddr(__ip_sock_saddr($sock->sk), __ip_sock_family($sock->sk))
            daddr   = format_ipaddr(__ip_sock_daddr($sock->sk), __ip_sock_family($sock->sk))
            sport   = __tcp_sock_sport($sock->sk)
            dport   = __tcp_sock_dport($sock->sk)
            state = tcp_ts_get_info_state($sock->sk)

            printf("%s:%d => %s:%d %s[%d] %s[%d] %s[%d] %d %d\n",
                saddr, sport, daddr, dport, tcp_sockstate_str(state), state,
                pro_str, protocol, fam_str, family, flags, type);
        }
    }
'


# Socket read, recv, write, send I/O count by syscall:
stap -v -T 10 -e '
    global rcounts;
    global wcounts;
    probe socket.sendmsg.return, socket.writev.return ?, socket.aio_write.return ?, socket.write_iter.return ? {
        wcounts[name] <<< 1
    }
    probe socket.recvmsg.return, socket.readv.return ?, socket.aio_read.return ?, socket.read_iter.return ?{
        rcounts[name] <<< 1
    }
'

# Socket reads (write/send/recv) I/O count by syscall and process name:
stap -v -T 10 -e '
    global rcounts;
    global wcounts;
    probe socket.sendmsg.return, socket.writev.return ?, socket.aio_write.return ?, socket.write_iter.return ? {
        wcounts[execname(), name] <<< 1
    }
    probe socket.recvmsg.return, socket.readv.return ?, socket.aio_read.return ?, socket.read_iter.return ?{
        rcounts[execname(), name] <<< 1
    }
'

# Socket reads (write/send/recv) I/O count by process and user stack trace:
stap -v -T 10 -e '
    global rcounts;
    global wcounts;
    probe socket.sendmsg, socket.writev ?, socket.aio_write ?, socket.write_iter ? {
        wcounts[execname(), sprint_ubacktrace()] <<< 1
    }
    probe socket.recvmsg, socket.readv ?, socket.aio_read ?, socket.read_iter ?{
        rcounts[execname(), sprint_ubacktrace()] <<< 1
    }
'


# Socket read returned bytes by process name:
stap -v -T 10 -e '
    global rsum;
    probe socket.recvmsg, socket.readv ?, socket.aio_read ?, socket.read_iter ?{
        rsum[execname(), name] <<< size
    }
'


# Socket write requested bytes by process name:
stap -v -T 10 -e '
    global wsum;
    probe socket.sendmsg, socket.writev ?, socket.aio_write ?, socket.write_iter ? {
        wsum[execname(), name] <<< size
    }
'


# Socket read requested I/O size distribution by process name:
stap -v -T 10 -e '
    global rstat;
    probe socket.recvmsg.return, socket.readv.return ?, socket.aio_read.return ?, socket.read_iter.return ?{
        rstat[execname(), name] <<< size
    }
    probe end{
        foreach([execname, pbname] in rstat-){
            printf("process=%s, probe=%s\n", execname, pbname);
            println(@hist_log(rstat[execname, pbname]))
        }
    }
'



# Socket write requested I/O size distribution by process name:
stap -v -T 10 -e '
    global wstat;
    probe socket.sendmsg.return, socket.writev.return ?, socket.aio_write.return ?, socket.write_iter.return ? {
        wstat[execname(), name] <<< size
    }
    probe end{
        foreach([execname, pbname] in wstat-){
            printf("process=%s, probe=%s\n", execname, pbname);
            println(@hist_log(wstat[execname, pbname]))
        }
    }
'

# UDP read I/O size distribution by address
stap -v -T 10 -e '
    global rstat;
    probe udp.recvmsg.return {
        rstat[saddr, sport, daddr, dport, family] <<< size
    }
    probe end{
        foreach([saddr, sport, daddr, dport, family] in rstat-){
            println(@hist_log(rstat[saddr, sport, daddr, dport, family]))
        }
    }
'


# UDP read I/O size distribution by process name:
stap -v -T 10 -e '
    global rstat;
    probe udp.recvmsg.return {
        rstat[execname(), name] <<< size
    }
    probe end{
        foreach([execname, pbname] in rstat-){
            printf("process=%s, probe=%s\n", execname, pbname);
            println(@hist_log(rstat[execname, pbname]))
        }
    }
'


# UDP write I/O size distribution by address:
stap -v -T 10 -e '
    global wstat;
    probe udp.sendmsg.return {
        wstat[saddr, sport, daddr, dport, family] <<< size
    }
    probe end{
        foreach([saddr, sport, daddr, dport, family] in wstat-){
            printf("%s:%d => %s:%d, family=%d\n", saddr, sport, daddr, dport, family);
            println(@hist_log(wstat[saddr, sport, daddr, dport, family]))
        }
    }
'

# UDP write I/O size distribution by process name:
stap -v -T 10 -e '
    global wstat;
    probe udp.sendmsg.return {
        wstat[execname(), name] <<< size
    }
    probe end{
        foreach([execname, pbname] in wstat-){
            printf("process=%s, probe=%s\n", execname, pbname);
            println(@hist_log(wstat[execname, pbname]))
        }
    }
'



# UDP disconnect by address
stap -v -T 10 -e '
    probe udp.disconnect.return {
        printf("%s:%d => %s:%d, family=%d ret=%d\n", saddr, sport, daddr, dport, family, ret);
    }
'



# TCP incoming new-connection accepted by the computer
stap -v -T 10 -e '
    probe kernel.{function("tcp_accept"),function("inet_csk_accept")}.return? {
        sock = $return
        family = __ip_sock_family(sock)
        fam_str = sock_fam_num2str(family)
        if(fam_str == "INET" || fam_str == "INET6" || fam_str == "AF_INET" || fam_str == "AF_INET6"){
            saddr   = format_ipaddr(__ip_sock_saddr(sock), __ip_sock_family(sock))
            daddr   = format_ipaddr(__ip_sock_daddr(sock), __ip_sock_family(sock))
            sport   = __tcp_sock_sport(sock)
            dport   = __tcp_sock_dport(sock)
            state = tcp_ts_get_info_state(sock)
            rto = tcp_get_info_rto(sock)

            printf("%s:%d => %s:%d %s[%d] %s %d(ms)\n", saddr, sport, daddr, dport, fam_str, family, tcp_sockstate_str(state), rto/1000);
        }
    }
'


# TCP active connection by connect()
stap -v -T 15 -e '
    global currsocks;
    probe kernel.{function("tcp_v4_connect"),function("tcp_v6_connect")}?{
        currsocks[tid()] = $sk
    }
    probe kernel.{function("tcp_v4_connect"),function("tcp_v6_connect")}.return? {
        if(!currsocks[tid()]){
            next;
        }
        if($return != 0){
            delete currsocks[tid()]
            next;
        }

        so=currsocks[tid()]

        saddr   = format_ipaddr(__ip_sock_saddr(so), __ip_sock_family(so))
        daddr   = format_ipaddr(__ip_sock_daddr(so), __ip_sock_family(so))
        sport   = __tcp_sock_sport(so)
        dport   = __tcp_sock_dport(so)
        state = tcp_ts_get_info_state(so)
        printf("%s:%d => %s:%d %s\n", saddr, sport, daddr, dport, tcp_sockstate_str(state));

        delete currsocks[tid()]
    }
'





# TCP close
stap -v -T 15 -e '
    probe kernel.function("tcp_close").return {
        saddr   = format_ipaddr(__ip_sock_saddr($sk), __ip_sock_family($sk))
        daddr   = format_ipaddr(__ip_sock_daddr($sk), __ip_sock_family($sk))
        sport   = __tcp_sock_sport($sk)
        dport   = __tcp_sock_dport($sk)
        state = tcp_ts_get_info_state($sk)
        printf("%s:%d => %s:%d %s\n", saddr, sport, daddr, dport, tcp_sockstate_str(state));
    }
'


# TCP disconnection (Problem because of network map)
stap -v -T 15 -e '
    probe tcp.disconnect {
        saddr   = format_ipaddr(__ip_sock_saddr($sk), __ip_sock_family($sk))
        daddr   = format_ipaddr(__ip_sock_daddr($sk), __ip_sock_family($sk))
        sport   = __tcp_sock_sport($sk)
        dport   = __tcp_sock_dport($sk)
        state = tcp_ts_get_info_state($sk)
        printf("%s:%d => %s:%d %s\n", saddr, sport, daddr, dport, tcp_sockstate_str(state));
    }
'


# TCP state
stap -L 'kernel.function("tcp_set_state")'
> kernel.function("tcp_set_state@net/ipv4/tcp.c:1897") $sk:struct sock* $state:int
stap -L 'kernel.function("tcp_set_state").return'
> kernel.function("tcp_set_state@net/ipv4/tcp.c:1897").return $sk:struct sock* $state:int
stap -v -T 15 -e '
    probe kernel.function("tcp_set_state").return {
        saddr   = format_ipaddr(__ip_sock_saddr(@entry($sk)), __ip_sock_family(@entry($sk)))
        daddr   = format_ipaddr(__ip_sock_daddr(@entry($sk)), __ip_sock_family(@entry($sk)))
        sport   = __tcp_sock_sport(@entry($sk))
        dport   = __tcp_sock_dport(@entry($sk))
        state = tcp_ts_get_info_state(@entry($sk))
        printf("%s:%d => %s:%d %s\n", saddr, sport, daddr, dport, tcp_sockstate_str(state));
    }
'




# TCP active connection latency
stap -v -T 15 -e '
    global currsocks;
    probe kernel.{function("tcp_v4_connect"),function("tcp_v6_connect")} {
        currsocks[$sk] = gettimeofday_ns()
    }
    probe kernel.function("tcp_rcv_state_process") {
        so = $sk
        state = tcp_ts_get_info_state(so)
        if(tcp_sockstate_str(state) != "TCP_SYN_SENT"){
            next;
        }
        stime = currsocks[so]
        if(!stime){
            next;
        }

        saddr   = format_ipaddr(__ip_sock_saddr(so), __ip_sock_family(so))
        daddr   = format_ipaddr(__ip_sock_daddr(so), __ip_sock_family(so))
        sport   = __tcp_sock_sport(so)
        dport   = __tcp_sock_dport(so)
        state = tcp_ts_get_info_state(so)
        lat = (gettimeofday_ns()-stime)/1000
        printf("%s:%d => %s:%d %s %d(ms)\n", saddr, sport, daddr, dport, tcp_sockstate_str(state), lat);
        delete currsocks[so]
    }
'

# TCP retransmit
stap -L 'kernel.function("tcp_retransmit_skb")'
> kernel.function("tcp_retransmit_skb@net/ipv4/tcp_output.c:2604") $sk:struct sock* $skb:struct sk_buff* $__func__:char[] const
stap -v -T 15 -e '
    probe kernel.function("tcp_retransmit_skb") {
        saddr   = format_ipaddr(__ip_sock_saddr($sk), __ip_sock_family($sk))
        daddr   = format_ipaddr(__ip_sock_daddr($sk), __ip_sock_family($sk))
        sport   = __tcp_sock_sport($sk)
        dport   = __tcp_sock_dport($sk)
        state = tcp_ts_get_info_state($sk)
        printf("%s:%d => %s:%d %s\n", saddr, sport, daddr, dport, tcp_sockstate_str(state));
    }
'




# TCP drop
stap -L 'kernel.function("tcp_drop")'
> kernel.function("tcp_drop@net/ipv4/tcp_input.c:4264") $sk:struct sock* $skb:struct sk_buff*
stap -v -T 15 -e '
    probe kernel.function("tcp_drop") {
        saddr   = format_ipaddr(__ip_sock_saddr($sk), __ip_sock_family($sk))
        daddr   = format_ipaddr(__ip_sock_daddr($sk), __ip_sock_family($sk))
        sport   = __tcp_sock_sport($sk)
        dport   = __tcp_sock_dport($sk)
        state = tcp_ts_get_info_state($sk)

        tcphdr = __get_skb_tcphdr($skb)
        urg = __tcp_skb_urg(tcphdr)
        ack = __tcp_skb_ack(tcphdr)
        psh = __tcp_skb_psh(tcphdr)
        rst = __tcp_skb_rst(tcphdr)
        syn = __tcp_skb_syn(tcphdr)
        fin = __tcp_skb_fin(tcphdr)

        printf("%s:%d  %s:%d %s urg=%d ack=%d psh=%d rst=%d syn=%d fin=%d\n",
            saddr, sport, daddr, dport, tcp_sockstate_str(state), urg, ack, psh, rst, syn, fin);
    }
'


# TCP life
stap -L 'kernel.function("inet_sock_set_state")'
stap -L 'kernel.function("tcp_set_state")'
kernel.function("tcp_set_state@net/ipv4/tcp.c:1897") $sk:struct sock* $state:int




# TCP packets count received
stap -v -T 5 -e 'global pkts; probe tcp.receive { pkts[daddr] <<< 1 }'
stap -v -T 5 -e 'global pkts; probe tcp.receive { pkts[saddr, sport, daddr, dport] <<< 1 }'


# TCP packets count received by server, useful for further customizations.
stap -v -T 5 -e '
    global pkts;
    probe tcp.recvmsg {
        pkts[saddr, sport, daddr, dport] <<< 1;
    }
    probe end{
        foreach([saddr, sport, daddr, dport] in pkts-){
            printf("%16s:%-5d %16s:%5d %5d\n",
                saddr, sport, daddr, dport, @count(pkts[saddr, sport, daddr, dport]));
        }
    }
'


# TCP receive bytes summary, summarizes TCP receive payload bytes.
stap -v -T 5 -e '
    global pktBytes;
    probe tcp.recvmsg {
        pktBytes[saddr, sport, daddr, dport] <<< size
    }
    probe end{
        foreach([saddr, sport, daddr, dport] in pktBytes-){
            printf("%16s:%-5d %16s:%5d\n", saddr, sport, daddr, dport);
            print(@hist_log(pktBytes[saddr, sport, daddr, dport]));
        }
    }
'





# TCP sent bytes summary, summarizes TCP sent payload bytes.
stap -v -T 5 -e '
    global pktBytes;
    probe tcp.sendmsg {
        saddr   = format_ipaddr(__ip_sock_saddr(sock), __ip_sock_family(sock))
        daddr   = format_ipaddr(__ip_sock_daddr(sock), __ip_sock_family(sock))
        sport   = __tcp_sock_sport(sock)
        dport   = __tcp_sock_dport(sock)
        pktBytes[saddr, sport, daddr, dport] <<< size
    }
    probe end{
        foreach([saddr, sport, daddr, dport] in pktBytes-){
            printf("%16s:%-5d %16s:%5d\n", saddr, sport, daddr, dport);
            print(@hist_log(pktBytes[saddr, sport, daddr, dport]));
        }
    }
'



# Tcp dump like1
stap -v -T 5 -e '
    probe tcp.receive {
        printf(" %15s %15s  %5d  %5d  U=%d  A=%d  P=%d  R=%d  S=%d  F=%d\n",
        saddr, daddr, sport, dport, urg, ack, psh, rst, syn, fin)
    }
'


# Tcp dump like2
stap -v -T 5 -e '
    probe tcp.receive {
        state = tcp_ts_get_info_state($skb)
        printf(" %15s:%-5d %15s:%-5d  U=%d  A=%d  P=%d  R=%d  S=%d  F=%d state=%s[%d]\n",
         saddr, sport, daddr, dport, urg, ack, psh, rst, syn, fin, tcp_sockstate_str(state), state)
    }
'


# Print a trace of threads sending IP packets (UDP or TCP)
stap -v -T 10 -e '
    probe netfilter.ip.local_out {
        printf("%s[%d] sent packet to %s:%d\n", execname(), tid(), daddr, dport);
    }
'




# IP inbound function
stap -L 'kernel.function("ip_rcv")'
kernel.function("ip_rcv@net/ipv4/ip_input.c:382") $skb:struct sk_buff* $dev:struct net_device* $pt:struct packet_type* $orig_dev:struct net_device*

# IP outbound function
stap -L 'kernel.function("ip_queue_xmit")'
> kernel.function("ip_queue_xmit@net/ipv4/ip_output.c:377") $skb:struct sk_buff* $fl:struct flowi* $inet:struct inet_sock*

# IP outbound function
stap -L 'kernel.function("ip_finish_output")'
kernel.function("ip_finish_output@net/ipv4/ip_output.c:267") $sk:struct sock* $skb:struct sk_buff*

# IP netfilter functions
stap -l 'netfilter.ip.*'
> netfilter.ip.forward
> netfilter.ip.local_in
> netfilter.ip.local_out
> netfilter.ip.post_routing
> netfilter.ip.pre_routing
stap -l 'netfilter.ipv4.*'
stap -l 'netfilter.ipv6.*'

# IP STATS MIB SNMP
> https://elixir.bootlin.com/linux/v3.10/source/include/uapi/linux/snmp.h
> https://www.kernel.org/doc/html/v5.0/networking/snmp_counter.html

# IP inbound explicit congestion notification
// see INET_ECN_MASK = 3 : https://elixir.bootlin.com/linux/v3.10/source/include/net/inet_ecn.h#L15
stap -v -T 10 -e '
    probe kernel.function("ip_rcv") {
        iph = __get_skb_iphdr($skb)
        tos = @cast(iph, "iphdr", "kernel<linux/ip.h>:kernel<uapi/linux/ip.h>")->tos

        if( (tos & 3) == 3 ){
         printf("ECN CE: %d %d %s %s\n", gettimeofday_ns()/1000, __ip_skb_proto(iph), ip_ntop(__ip_skb_saddr(iph)), ip_ntop(__ip_skb_daddr(iph)));
        }else{
            version = @cast(iph, "iphdr", "kernel<linux/ip.h>:kernel<uapi/linux/ip.h>")->version
            printf("debug: %d %d %d %s %s\n", gettimeofday_ns()/1000, __ip_skb_proto(iph), version, ip_ntop(__ip_skb_saddr(iph)), ip_ntop(__ip_skb_daddr(iph)));
        }
    }
'




# IP counts every second by mib
stap -v -T 10 -e '
    probe ipmib.InReceives {
        //printf("debug: %d \n", InReceives[1]);
    }

    probe ipmib.OutRequests{
    }

    probe ipmib.InDiscards {
    }

    probe timer.s(1) {
        printf("\n\n");

        printf("%20s %16s %16s %16s\n", "TIME", "InReceives(count)", "OutRequests(count)", "InDiscards(count)");
        printf("%20d %16d %16d %16d\n", gettimeofday_ns()/1000, InReceives[1], OutRequests[1], InDiscards[1]);

        delete InReceives[1]
        delete OutRequests[1]
        delete InDiscards[1]
    }
'


# IP stat every second: out(bytes) outDiscards in(bytes) inDiscards inErrors
# IPSTATS_MIB_OUTDISCARDS : https://elixir.bootlin.com/linux/v3.10/source/net/ipv4/ip_output.c#L1360
stap -v -T 10 -e '
    global outDiscards = 0
    global inDiscards = 0
    global inBytes = 0
    global outBytes =0


    probe ipmib.InReceives {
        iph = __get_skb_iphdr(skb)
        len = ntohs(@cast(iph, "iphdr", "kernel<linux/ip.h>:kernel<uapi/linux/ip.h>")->tot_len);
        inBytes = inBytes + len
    }

    probe ipmib.OutRequests {
        iph = __get_skb_iphdr(skb)
        len = ntohs(@cast(iph, "iphdr", "kernel<linux/ip.h>:kernel<uapi/linux/ip.h>")->tot_len);
        outBytes = outBytes + len
    }


    probe ipmib.InDiscards {
        inDiscards ++
    }


    probe kernel.{function("ip_send_skb"), function("ip_append_page"), function("__ip_append_data")}.return ?{
        if($return){
            outDiscards ++
        }
    }

    probe timer.s(1) {
        printf("\n\n");

        printf("%20s %16s %16s %16s %16s\n", "TIME", "InBytes", "InDiscards", "OutBytes", "OutDiscards");
        printf("%20d %16d %16d %16d %16d\n", gettimeofday_ns()/1000, inBytes, inDiscards, outBytes, outDiscards);

        inBytes = 0
        inDiscards = 0
        outBytes = 0
        outDiscards = 0
    }
'


# IP send/receive snoop ip
stap -v -T 10 -e '
    global lastTime;
    probe begin {
        printf(" %3s %10s %15s %15s %8s %6s\n", "CPU", "DELTA(us)", "SOURCE", "DEST", "INT", "BYTES");
        lastTime = gettimeofday_ns()
    }

    probe kernel.function("ip_rcv"){
        iph = __get_skb_iphdr($skb)
        saddr = ip_ntop(__ip_skb_saddr(iph))
        daddr = ip_ntop(__ip_skb_daddr(iph))

        delta = gettimeofday_ns() - lastTime
        printf(" %3d %10d %15s <- %15s %8s %6d\n", cpu(), delta/1000, saddr, daddr, get_netdev_name($skb->dev), $skb->len)
        lastTime = gettimeofday_ns()
    }

    probe kernel.function("ip_finish_output") {
        iph = __get_skb_iphdr($skb)
        saddr = ip_ntop(__ip_skb_saddr(iph))
        daddr = ip_ntop(__ip_skb_daddr(iph))

        delta = gettimeofday_ns() - lastTime
        printf(" %3d %10d %15s -> %15s %8s %6d\n", cpu(), delta/1000, saddr, daddr, get_netdev_name($skb->dev), $skb->len)
        lastTime = gettimeofday_ns()
    }
'


# IP encapsulated prototype summary ip
stap -v -T 10 -e '
    global counts;
    global lastCounts;
    probe begin {
        printf(" %-28s %-28s %13s %8s\n", "SADDR", "DADDR", "PROTO", "COUNT");
    }

    probe kernel.function("ip_rcv"){
        iph = __get_skb_iphdr($skb)
        saddr = ip_ntop(__ip_skb_saddr(iph))
        daddr = ip_ntop(__ip_skb_daddr(iph))
        protocol = __ip_skb_proto(iph)

        //printf(" %15s <- %15s %8s(%d)\n", saddr, daddr, sock_prot_num2str(protocol), protocol)
        counts[saddr, daddr, protocol] <<< 1
    }

    probe kernel.function("ip_finish_output") {
        iph = __get_skb_iphdr($skb)
        saddr = ip_ntop(__ip_skb_saddr(iph))
        daddr = ip_ntop(__ip_skb_daddr(iph))
        protocol = __ip_skb_proto(iph)


        //printf(" %15s -> %15s %8s(%d)\n", saddr, daddr, sock_prot_num2str(protocol), protocol)
        counts[saddr, daddr, protocol] <<< 1
    }

    probe timer.s(1){
        printf(" %-28s %-28s %11s %8s\n", "SADDR", "DADDR", "PROTO", "COUNT");
        foreach([saddr, daddr, protocol] in counts-){
            cNum=0
            if (lastCounts[saddr, daddr, protocol]){
                cNum=@count(counts[saddr, daddr, protocol]) - lastCounts[saddr, daddr, protocol]
            }else{
                cNum=@count(counts[saddr, daddr, protocol])
            }

            lastCounts[saddr, daddr, protocol] = @count(counts[saddr, daddr, protocol])
            if(cNum){
                printf(" %-28s %-28s %8s(%-3d) %8d\n", saddr, daddr, sock_prot_num2str(protocol), protocol, cNum)
            }
        }
        printf("\n\n");
    }
'






