# Trace net/socket.c call graph
stap -v -T 10 -e '
    probe kernel.function("*@net/socket.c").call{
        printf ("%s -> %s\n", thread_indent(1), probefunc())
    }
    probe kernel.function("*@net/socket.c").return{
        printf ("%s <- %s\n", thread_indent(-1), probefunc())
    }
'


# Socket listens
stap -v -T 10 -e '
    probe kernel.function("inet_listen") {
        time = gettimeofday_ns()
        family = __ip_sock_family($sock->sk)
        laddr   = format_ipaddr(__ip_sock_saddr($sock->sk), family)
        lport   = __tcp_sock_sport($sock->sk)

        printf("%18d %16s:%-5d %4d %4d %s[%d,%d]\n", time/1000, laddr, lport, family, $backlog, execname(), pid(), tid());
    }
'


# Socket accepts by process name:
stap -v -T 10 -e 'global counts; probe syscall.accept { counts[execname()] <<< 1 }'


# Socket connections by process and user stack trace:
stap -v -T 10 -e 'global counts; probe syscall.connect { counts[execname()] <<< 1; print_ubacktrace(); printf("\n"); }'





# Socket close:
stap -v -T 10 -e '
    probe socket.close {
        pro_str = sock_prot_num2str(protocol)
        if(pro_str == "TCP" || pro_str == "UDP"){
            fam_str = sock_fam_num2str(family)

            saddr   = format_ipaddr(__ip_sock_saddr($sock->sk), __ip_sock_family($sock->sk))
            daddr   = format_ipaddr(__ip_sock_daddr($sock->sk), __ip_sock_family($sock->sk))
            sport   = __tcp_sock_sport($sock->sk)
            dport   = __tcp_sock_dport($sock->sk)
            state = tcp_ts_get_info_state($sock->sk)

            printf("%s:%d => %s:%d %s[%d] %s[%d] %s[%d] %d %d\n",
                saddr, sport, daddr, dport, tcp_sockstate_str(state), state,
                pro_str, protocol, fam_str, family, flags, type);
        }
    }
'


# Socket read, recv, write, send I/O count by syscall:
stap -v -T 10 -e '
    global rcounts;
    global wcounts;
    probe socket.sendmsg.return, socket.writev.return ?, socket.aio_write.return ?, socket.write_iter.return ? {
        wcounts[name] <<< 1
    }
    probe socket.recvmsg.return, socket.readv.return ?, socket.aio_read.return ?, socket.read_iter.return ?{
        rcounts[name] <<< 1
    }
'

# Socket reads (write/send/recv) I/O count by syscall and process name:
stap -v -T 10 -e '
    global rcounts;
    global wcounts;
    probe socket.sendmsg.return, socket.writev.return ?, socket.aio_write.return ?, socket.write_iter.return ? {
        wcounts[execname(), name] <<< 1
    }
    probe socket.recvmsg.return, socket.readv.return ?, socket.aio_read.return ?, socket.read_iter.return ?{
        rcounts[execname(), name] <<< 1
    }
'

# Socket reads (write/send/recv) I/O count by process and user stack trace:
stap -v -T 10 -e '
    global rcounts;
    global wcounts;
    probe socket.sendmsg, socket.writev ?, socket.aio_write ?, socket.write_iter ? {
        wcounts[execname(), sprint_ubacktrace()] <<< 1
    }
    probe socket.recvmsg, socket.readv ?, socket.aio_read ?, socket.read_iter ?{
        rcounts[execname(), sprint_ubacktrace()] <<< 1
    }
'


# Socket read returned bytes by process name:
stap -v -T 10 -e '
    global rsum;
    probe socket.recvmsg, socket.readv ?, socket.aio_read ?, socket.read_iter ?{
        rsum[execname(), name] <<< size
    }
'


# Socket write requested bytes by process name:
stap -v -T 10 -e '
    global wsum;
    probe socket.sendmsg, socket.writev ?, socket.aio_write ?, socket.write_iter ? {
        wsum[execname(), name] <<< size
    }
'


# Socket read requested I/O size distribution by process name:
stap -v -T 10 -e '
    global rstat;
    probe socket.recvmsg.return, socket.readv.return ?, socket.aio_read.return ?, socket.read_iter.return ?{
        rstat[execname(), name] <<< size
    }
    probe end{
        foreach([execname, pbname] in rstat-){
            printf("process=%s, probe=%s\n", execname, pbname);
            println(@hist_log(rstat[execname, pbname]))
        }
    }
'



# Socket write requested I/O size distribution by process name:
stap -v -T 10 -e '
    global wstat;
    probe socket.sendmsg.return, socket.writev.return ?, socket.aio_write.return ?, socket.write_iter.return ? {
        wstat[execname(), name] <<< size
    }
    probe end{
        foreach([execname, pbname] in wstat-){
            printf("process=%s, probe=%s\n", execname, pbname);
            println(@hist_log(wstat[execname, pbname]))
        }
    }
'

# UDP read I/O size distribution by address
stap -v -T 10 -e '
    global rstat;
    probe udp.recvmsg.return {
        rstat[saddr, sport, daddr, dport, family] <<< size
    }
    probe end{
        foreach([saddr, sport, daddr, dport, family] in rstat-){
            println(@hist_log(rstat[saddr, sport, daddr, dport, family]))
        }
    }
'


# UDP read I/O size distribution by process name:
stap -v -T 10 -e '
    global rstat;
    probe udp.recvmsg.return {
        rstat[execname(), name] <<< size
    }
    probe end{
        foreach([execname, pbname] in rstat-){
            printf("process=%s, probe=%s\n", execname, pbname);
            println(@hist_log(rstat[execname, pbname]))
        }
    }
'


# UDP write I/O size distribution by address:
stap -v -T 10 -e '
    global wstat;
    probe udp.sendmsg.return {
        wstat[saddr, sport, daddr, dport, family] <<< size
    }
    probe end{
        foreach([saddr, sport, daddr, dport, family] in wstat-){
            printf("%s:%d => %s:%d, family=%d\n", saddr, sport, daddr, dport, family);
            println(@hist_log(wstat[saddr, sport, daddr, dport, family]))
        }
    }
'

# UDP write I/O size distribution by process name:
stap -v -T 10 -e '
    global wstat;
    probe udp.sendmsg.return {
        wstat[execname(), name] <<< size
    }
    probe end{
        foreach([execname, pbname] in wstat-){
            printf("process=%s, probe=%s\n", execname, pbname);
            println(@hist_log(wstat[execname, pbname]))
        }
    }
'



# UDP disconnect by address
stap -v -T 10 -e '
    probe udp.disconnect.return {
        printf("%s:%d => %s:%d, family=%d ret=%d\n", saddr, sport, daddr, dport, family, ret);
    }
'






# Tcp receive packets
stap -v -T 5 -e 'global pkts; probe tcp.receive { pkts[daddr] <<< 1 }'
stap -v -T 5 -e 'global pkts; probe tcp.receive { pkts[saddr, sport, daddr, dport] <<< 1 }'

# Tcp dump like1
stap -v -T 5 -e '
    probe tcp.receive {
        printf(" %15s %15s  %5d  %5d  U=%d  A=%d  P=%d  R=%d  S=%d  F=%d\n",
        saddr, daddr, sport, dport, urg, ack, psh, rst, syn, fin)
    }
'
# Tcp dump like2
stap -v -T 5 -e '
    probe tcp.receive {
        state = tcp_ts_get_info_state($skb)
        printf(" %15s:%-5d %15s:%-5d  U=%d  A=%d  P=%d  R=%d  S=%d  F=%d state=%s[%d]\n",
         saddr, sport, daddr, dport, urg, ack, psh, rst, syn, fin, tcp_sockstate_str(state), state)
    }
'

# TCP new incoming connection accepted by the computer
stap -v -T 10 -e '
    probe kernel.{function("tcp_accept"),function("inet_csk_accept")}.return? {
        sock = $return
        rto = tcp_get_info_rto(sock)
        saddr   = format_ipaddr(__ip_sock_saddr(sock), __ip_sock_family(sock))
        daddr   = format_ipaddr(__ip_sock_daddr(sock), __ip_sock_family(sock))
        sport   = __tcp_sock_sport(sock)
        dport   = __tcp_sock_dport(sock)
        state = tcp_ts_get_info_state(sock)
        printf("%s:%d => %s:%d %s %d(ms)\n", saddr, sport, daddr, dport, tcp_sockstate_str(state), rto/1000);
    }
'

# Tcp disconnection (problem because of network map)
stap -v -T 15 -e '
    probe tcp.disconnect {
        saddr   = format_ipaddr(__ip_sock_saddr($sk), __ip_sock_family($sk))
        daddr   = format_ipaddr(__ip_sock_daddr($sk), __ip_sock_family($sk))
        sport   = __tcp_sock_sport($sk)
        dport   = __tcp_sock_dport($sk)
        state = tcp_ts_get_info_state($sk)
        printf("%s:%d => %s:%d %s\n", saddr, sport, daddr, dport, tcp_sockstate_str(state));
    }
'


# Tcp packets received by server, useful for further customizations.
stap -v -T 5 -e '
    global pkts;
    probe tcp.recvmsg {
        pkts[saddr, sport, daddr, dport] <<< 1;
    }
    probe end{
        foreach([saddr, sport, daddr, dport] in pkts-){
            printf("%16s:%-5d %16s:%5d %5d\n",
                saddr, sport, daddr, dport, @count(pkts[saddr, sport, daddr, dport]));
        }
    }
'


# TCP tcp_rcv_established
stap -v -T 5 -e '
    probe kernel.function("tcp_rcv_established") {
        saddr   = format_ipaddr(__ip_sock_saddr($sk), __ip_sock_family($sk))
        sport   = __tcp_sock_sport($sk)
        daddr   = format_ipaddr(__ip_sock_daddr($sk), __ip_sock_family($sk))
        dport   = __tcp_sock_dport($sk)
        state = tcp_ts_get_info_state($sk)
        printf("%16s:%-5d %16s:%5d %s\n", saddr, sport, daddr, dport, tcp_sockstate_str(state));
    }
'



# Print a trace of threads sending IP packets (UDP or TCP)
stap -v -T 10 -e '
    probe netfilter.ip.local_out {
        printf("%s[%d] sent packet to %s:%d\n", execname(), tid(), daddr, dport);
    }
'



