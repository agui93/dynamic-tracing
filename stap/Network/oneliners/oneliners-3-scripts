

# Trace tcp receive packets
stap -v -T 5 -e 'global pkts; probe tcp.receive { pkts[daddr] <<< 1 }'
stap -v -T 5 -e 'global pkts; probe tcp.receive { pkts[saddr, sport, daddr, dport] <<< 1 }'

# Dump tcp like1
stap -v -T 5 -e '
    probe tcp.receive {
        printf(" %15s %15s  %5d  %5d  U=%d  A=%d  P=%d  R=%d  S=%d  F=%d\n",
        saddr, daddr, sport, dport, urg, ack, psh, rst, syn, fin)
    }
'
# Dump tcp like2
stap -v -T 5 -e '
    probe tcp.receive {
        state = tcp_ts_get_info_state($skb)
        printf(" %15s:%-5d %15s:%-5d  U=%d  A=%d  P=%d  R=%d  S=%d  F=%d state=%s[%d]\n",
         saddr, sport, daddr, dport, urg, ack, psh, rst, syn, fin, tcp_sockstate_str(state), state)
    }
'

# Trace information for each new incoming TCP connection accepted by the computer
stap -v -T 10 -e '
    probe kernel.{function("tcp_accept"),function("inet_csk_accept")}.return? {
        sock = $return
        rto = tcp_get_info_rto(sock)
        saddr   = format_ipaddr(__ip_sock_saddr(sock), __ip_sock_family(sock))
        daddr   = format_ipaddr(__ip_sock_daddr(sock), __ip_sock_family(sock))
        sport   = __tcp_sock_sport(sock)
        dport   = __tcp_sock_dport(sock)
        state = tcp_ts_get_info_state(sock)
        printf("%s:%d => %s:%d %s %d(ms)\n", saddr, sport, daddr, dport, tcp_sockstate_str(state), rto/1000);
    }
'

# Trace tcp disconnection (problem because of network map)
stap -v -T 15 -e '
    probe tcp.disconnect {
        saddr   = format_ipaddr(__ip_sock_saddr($sk), __ip_sock_family($sk))
        daddr   = format_ipaddr(__ip_sock_daddr($sk), __ip_sock_family($sk))
        sport   = __tcp_sock_sport($sk)
        dport   = __tcp_sock_dport($sk)
        state = tcp_ts_get_info_state($sk)
        printf("%s:%d => %s:%d %s\n", saddr, sport, daddr, dport, tcp_sockstate_str(state));
    }
'



# Trace serverâ€“received tcp packets, useful for further customizations.
stap -v -T 5 -e '
    global pkts;
    probe tcp.recvmsg {
        pkts[saddr, sport, daddr, dport] <<< 1;
    }
    probe end{
        foreach([saddr, sport, daddr, dport] in pkts-){
            printf("%16s:%-5d %16s:%5d %5d\n",
                saddr, sport, daddr, dport, @count(pkts[saddr, sport, daddr, dport]));
        }
    }
'


# tcp_rcv_established
stap -v -T 5 -e '
    probe kernel.function("tcp_rcv_established") {
        saddr   = format_ipaddr(__ip_sock_saddr($sk), __ip_sock_family($sk))
        sport   = __tcp_sock_sport($sk)
        daddr   = format_ipaddr(__ip_sock_daddr($sk), __ip_sock_family($sk))
        dport   = __tcp_sock_dport($sk)
        state = tcp_ts_get_info_state($sk)
        printf("%16s:%-5d %16s:%5d %s\n", saddr, sport, daddr, dport, tcp_sockstate_str(state));
    }
'


# Print a trace of threads sending IP packets (UDP or TCP)
stap -v -T 10 -e '
    probe netfilter.ip.local_out {
        printf("%s[%d] sent packet to %s:%d\n", execname(), tid(), daddr, dport);
    }
'



